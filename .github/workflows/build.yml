name: build

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

env:
  NODE_BUILD_CMD: npm run prebuildify

jobs:
  # test:
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-20.04
  #         - macos-latest
  #         - macos-14
  #         - windows-2019
  #       node:
  #         - 18
  #         - 20
  #         - 22
  #   name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - if: ${{ startsWith(matrix.os, 'windows') }}
  #       run: pip.exe install setuptools
  #     - if: ${{ startsWith(matrix.os, 'macos') }}
  #       run: brew install python-setuptools
  #     - if: ${{ !startsWith(matrix.os, 'windows') && !startsWith(matrix.os, 'macos') }}
  #       run: python3 -m pip install setuptools
  #     - run: npm install
  #     - run: npm run build-debug
  #     - run: npm test
  #     - name: Test SpatiaLite extension
  #       if: ${{ startsWith(matrix.os, 'ubuntu') }}
  #       run: |
  #         sudo apt update
  #         sudo apt install libsqlite3-mod-spatialite -y
  #         node -e "require('./lib/index.js')(':memory:').loadExtension('mod_spatialite').exec('SELECT InitSpatialMetaData();')"

  prebuild:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - macos-latest
          - macos-14
          - macos-13
          - windows-2019
    name: Prebuild on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - if: ${{ startsWith(matrix.os, 'windows') }}
        run: pip.exe install setuptools
      - if: ${{ startsWith(matrix.os, 'macos') }}
        run: brew install python-setuptools
      - if: ${{ !startsWith(matrix.os, 'windows') && !startsWith(matrix.os, 'macos') }}
        run: python3 -m pip install setuptools
      - run: npm install --ignore-scripts
      - run: ${{ env.NODE_BUILD_CMD }}
      - name: Archive prebuilds - windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: Compress-Archive -Path ./prebuilds -DestinationPath prebuilds-${{ matrix.os }}.zip
      - name: Archive prebuilds - non-windows
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: tar -czf prebuilds-${{ matrix.os }}.tar.gz prebuilds/
      - name: Upload prebuilds - tar
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds-${{ matrix.os }}.tar.gz
      - name: Upload prebuilds - zip
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds-${{ matrix.os }}.zip

  prebuild-linux-arm:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
    name: Prebuild on Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - run: |
          docker run --rm -v $(pwd):/tmp/project --entrypoint /bin/sh --platform linux/${{ matrix.arch }} node:18 -c "\
          cd /tmp/project && \
          npm install --ignore-scripts && \
          ${{ env.NODE_BUILD_CMD }}"
      - name: Archive prebuilds
        run: tar -czf prebuilds-linux-${{ matrix.arch }}.tar.gz prebuilds/
      - name: Upload prebuilds
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-linux-${{ matrix.arch }}
          path: prebuilds-linux-${{ matrix.arch }}.tar.gz

  publish:
    name: Publishing to NPM
    runs-on: ubuntu-20.04
    needs:
      - prebuild
      - prebuild-linux-arm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://npm.pkg.github.com
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./prebuilds
      - name: List prebuilds directory
        run: ls -la prebuilds/prebuilds-ubuntu-20.04
      - name: Unzip files
        run: |
          tar --overwrite -xzf prebuilds/prebuilds-ubuntu-20.04/prebuilds-ubuntu-20.04.tar.gz -C ./
          tar --overwrite -xzf prebuilds/prebuilds-macos-latest/prebuilds-macos-latest.tar.gz -C ./
          tar --overwrite -xzf prebuilds/prebuilds-macos-14/prebuilds-macos-14.tar.gz -C ./
          tar --overwrite -xzf prebuilds/prebuilds-macos-13/prebuilds-macos-13.tar.gz -C ./
          unzip -o prebuilds/prebuilds-windows-2019/prebuilds-windows-2019.zip -d ./
          tar --overwrite -xzf prebuilds/prebuilds-linux-arm64/prebuilds-linux-arm64.tar.gz -C ./
          rm -rf prebuilds/prebuilds-ubuntu-20.04 prebuilds/prebuilds-macos-latest prebuilds/prebuilds-macos-14 prebuilds/prebuilds-windows-2019 prebuilds/prebuilds-linux-arm64 prebuilds/prebuilds-macos-13
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
